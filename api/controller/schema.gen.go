// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Post defines model for Post.
type Post struct {
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`

	// Likes List of users who liked the post
	Likes     []User     `json:"likes"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    string     `json:"user_id"`
}

// PostCreate defines model for PostCreate.
type PostCreate struct {
	Content string `json:"content"`
	UserId  string `json:"user_id"`
}

// PostWithReplies defines model for PostWithReplies.
type PostWithReplies struct {
	Post    Post    `json:"post"`
	Replies []Reply `json:"replies"`
}

// Reply defines model for Reply.
type Reply struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	PostId    string     `json:"post_id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    string     `json:"user_id"`
}

// ReplyCreate defines model for ReplyCreate.
type ReplyCreate struct {
	Content string `json:"content"`
	PostId  string `json:"post_id"`
	UserId  string `json:"user_id"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time  `json:"created_at"`
	Email     string     `json:"email"`
	Id        string     `json:"id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Username  string     `json:"username"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

// PostPostsPostIdLikeJSONBody defines parameters for PostPostsPostIdLike.
type PostPostsPostIdLikeJSONBody struct {
	UserId string `json:"user_id"`
}

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostCreate

// PostPostsPostIdLikeJSONRequestBody defines body for PostPostsPostIdLike for application/json ContentType.
type PostPostsPostIdLikeJSONRequestBody PostPostsPostIdLikeJSONBody

// PostRepliesJSONRequestBody defines body for PostReplies for application/json ContentType.
type PostRepliesJSONRequestBody = ReplyCreate

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a post
	// (POST /posts)
	PostPosts(c *gin.Context)
	// Get a post by ID (include replies)
	// (GET /posts/{post_id})
	GetPostsPostId(c *gin.Context, postId string)
	// Like a post
	// (POST /posts/{post_id}/like)
	PostPostsPostIdLike(c *gin.Context, postId string)
	// Create a reply
	// (POST /replies)
	PostReplies(c *gin.Context)
	// Get all users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Create a user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Get all posts for a user
	// (GET /users/{user_id}/posts)
	GetUsersUserIdPosts(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPosts(c)
}

// GetPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostId(c *gin.Context) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", c.Param("post_id"), &postId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter post_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsPostId(c, postId)
}

// PostPostsPostIdLike operation middleware
func (siw *ServerInterfaceWrapper) PostPostsPostIdLike(c *gin.Context) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", c.Param("post_id"), &postId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter post_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPostsPostIdLike(c, postId)
}

// PostReplies operation middleware
func (siw *ServerInterfaceWrapper) PostReplies(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostReplies(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// GetUsersUserIdPosts operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdPosts(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdPosts(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/posts", wrapper.PostPosts)
	router.GET(options.BaseURL+"/posts/:post_id", wrapper.GetPostsPostId)
	router.POST(options.BaseURL+"/posts/:post_id/like", wrapper.PostPostsPostIdLike)
	router.POST(options.BaseURL+"/replies", wrapper.PostReplies)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.GET(options.BaseURL+"/users/:user_id/posts", wrapper.GetUsersUserIdPosts)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXX4vjNhD/KmLahyv41rnePQS/XVs4AgcNB0sLJSxaa7LW1bZUSb4jBH/3MrKcOLGd",
	"eJPNti/5Y81oZn7zmz/eQqoKrUosnYVkCzbNsOD+51JZR9/aKI3GSfRPU1U6LP2B22iEBKwzsnyCOoLU",
	"IHcoHrg/XitT0C8Q3OFbJwuEqK8jxYFslUsxJJbLvxv7Am1qpHZSlZDAZ2kdU2tWWTSWfc8UI0HBXIZM",
	"k/8RSIeF1/zR4BoS+CHeRxyHcON7i4bMBLvcGL6h/5UWz46IfHmYFFYdgcF/KmlQQPIXeJFWO9ohfYBr",
	"i8Rqd5l6/IqpI8OUsF+96PPSdrHDfV/H3PpDuuwL6jx4c+ibDkQ7lSBPRm9+d8mkxJLRTT+zR4EEqrSX",
	"D0XRXPR/KQdy+GGi7H/J4dbPETaPAn0JjZ+FyfWU74c2FI1vLP0wLmAGFlzmg4HfmAclL3DA7ljivXjr",
	"7tlsEz5jyR6PeLpbPY/6TpCKLNeqP10+LhdsrUwzXSI/UGzEeClY2ykicNLldNu9Q/v2T/ZxuYAIvqGx",
	"zRXv7mZ3M3JZaSy5lpDA+7vZ3XsiEHeZjzP2F3c7IaHAyYmFgMQ30KUXaWJD635RYnNUD1zrXKZeK/5q",
	"yXg7zaf01pCD+hA/Zyr0D6xWpW2y8vPs3YtabmweAk/PWWCOT6mtioKbDSTQOMp4O94df7JtC7ewIuEG",
	"z3gbKrQmL55wANhP2OBKHwtf09zwAh0aunILknyhNEEEDd06VX+IUtSJ+JiRqx6CsxdFsDtcx8Bcq6oU",
	"7M136bKWvD8RLT/MPvR57zVKFbSOEvAJXUCfPW7Y4jf2RpZpXgnc3zspKzEtMhNI3yTnMwnfNEGX1dVh",
	"x7p6rAx3p3MFObt5QRL8jAvRK8fm4FQxdja28Ux/2fXTWzS47krxyh0u7J99RP3BuR5nvPYwrn4onWpt",
	"917gSrJc8fY0xKLO29pQW8nzcLYPufm/CvvdMHv2kb48dzoLyitTp0G1jyI9P0ccQm0AxB1v4m3oOPV+",
	"+TjJI/pYiHYLOd+G93vy683JSVxtXySnctXD47fAgOowbXtiA0VLimi+tahVJocEMud0Ese5SnmeKeuS",
	"+Xw+B8Ii6B8P59/b/FjGH1XldhXTQd5CHZ3V0yGZncFpoV7V/wYAAP//RymvzxMSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
