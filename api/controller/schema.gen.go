// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Post defines model for Post.
type Post struct {
	Content   string     `json:"content"`
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    string     `json:"user_id"`
}

// PostCreate defines model for PostCreate.
type PostCreate struct {
	Content string `json:"content"`
	UserId  string `json:"user_id"`
}

// PostWithReposts defines model for PostWithReposts.
type PostWithReposts struct {
	Post    *Post     `json:"post,omitempty"`
	Reposts *[]Repost `json:"reposts,omitempty"`
}

// Repost defines model for Repost.
type Repost struct {
	CreatedAt time.Time  `json:"created_at"`
	Id        string     `json:"id"`
	Post      Post       `json:"post"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UserId    string     `json:"user_id"`
}

// RepostCreate defines model for RepostCreate.
type RepostCreate struct {
	Content string `json:"content"`
	PostId  string `json:"post_id"`
	UserId  string `json:"user_id"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time  `json:"created_at"`
	Email     string     `json:"email"`
	Id        string     `json:"id"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Username  string     `json:"username"`
}

// UserCreate defines model for UserCreate.
type UserCreate struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

// PostPostsJSONRequestBody defines body for PostPosts for application/json ContentType.
type PostPostsJSONRequestBody = PostCreate

// PostRepostsJSONRequestBody defines body for PostReposts for application/json ContentType.
type PostRepostsJSONRequestBody = RepostCreate

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = UserCreate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a post
	// (POST /posts)
	PostPosts(c *gin.Context)
	// Get a post by ID (include reposts)
	// (GET /posts/{post_id})
	GetPostsPostId(c *gin.Context, postId string)
	// Create a repost
	// (POST /reposts)
	PostReposts(c *gin.Context)
	// Get all users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Create a user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Get all posts for a user
	// (GET /users/{user_id}/posts)
	GetUsersUserIdPosts(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostPosts operation middleware
func (siw *ServerInterfaceWrapper) PostPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPosts(c)
}

// GetPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPostId(c *gin.Context) {

	var err error

	// ------------- Path parameter "post_id" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "post_id", c.Param("post_id"), &postId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter post_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsPostId(c, postId)
}

// PostReposts operation middleware
func (siw *ServerInterfaceWrapper) PostReposts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostReposts(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// GetUsersUserIdPosts operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserIdPosts(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserIdPosts(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/posts", wrapper.PostPosts)
	router.GET(options.BaseURL+"/posts/:post_id", wrapper.GetPostsPostId)
	router.POST(options.BaseURL+"/reposts", wrapper.PostReposts)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.GET(options.BaseURL+"/users/:user_id/posts", wrapper.GetUsersUserIdPosts)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWX2vbMBD/KuK2hw7cOF37EPzWbVACg4VC2WCEotqXRsW2PEnuCMHffZwkJ05s12mb",
	"di+pa9/f3/3uzxpimRUyx9xoiNag4yVm3D7OpDb0t1CyQGUE2rexzA3m9oNZFQgRaKNEfg9VALFCbjC5",
	"5fbzQqqMniDhBk+NyBCCto5IdmTLVCRdYmWRPNt0qVHdHmS/CkDhn1IoTCD6DVak1g42Ke8kON8YkXcP",
	"GBtySIh9tSLPw+3FgbZj7AvrpzDLayykdmXeja3wlf6ocAERfAi3nAg9IULLBut+Y0QYzPSQnnNKmj4u",
	"rhRf2UxagXrZNnZvx6vnpP4/OWjjHCSgA/AlFCS920N78fV0rd09Tdwbjeo4bMCMi7Qz8TeePznPsMNv",
	"X7GteB3uYLkJn75i92d8eFitiNpBkIrIF5KMJahjJQojZA4RXM6mbCEVIyM6YHZqBIznCatHSABGmJSs",
	"3RjUp7/Y5WwKATyi0s7E2Wg8GlPIssCcFwIiOB+NR+dEIG6WNs9wO9N8KxMKnIKYJhDZ4Tfz7ig31OaL",
	"TFZ7/cCLIhWx1QofNDmvV+Ehw8HXoNrFz6gS7QtdyFy7qnwenx3Vs/O5Czy9Z545tqS6zDKuVhCBC5Rx",
	"5seJ4feaCu0wnJOwwzNc+w6tKIp77AD2Ch2u9DO1Pc0Vz9CgIpNrEBQLlQkCcHRrdP0uSkEj431GzlsI",
	"jo+KYHMx9oG5kGWesJO/wixr8n4iWl6ML9q8txq59Fp7BbhC49Fndys2/cZORB6nZYJbu91Vaazdfp5f",
	"bxrrLZi+s1zemev1FdEukPsyxHcHXw+2dkI9xfMbK/BKIh50LdmN176VWll/F9owuXDDtYtjaeq/bVN2",
	"/88bR0+bQdtMj8+fxrZ6Z/Y4VNso0vsh5hBqHSBueBOu/VVTbTfRkzyin2lSr6Thobk9mt5vaB7E1Vn3",
	"Xd/LVQuPPQk8qt20bYl1NC0ponqsUStVChEsjSmiMExlzNOl1CaaTCYTICy8/v6k/lHXRzN+J0uz6ZgG",
	"8hqqYFCvnrqNNaehmlf/AgAA//8nX0JbXQ8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
