// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Repost is an object representing the database table.
type Repost struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PostID    string    `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *repostR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L repostL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepostColumns = struct {
	ID        string
	UserID    string
	PostID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	PostID:    "post_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var RepostTableColumns = struct {
	ID        string
	UserID    string
	PostID    string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "reposts.id",
	UserID:    "reposts.user_id",
	PostID:    "reposts.post_id",
	CreatedAt: "reposts.created_at",
	UpdatedAt: "reposts.updated_at",
}

// Generated where

var RepostWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	PostID    whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "`reposts`.`id`"},
	UserID:    whereHelperstring{field: "`reposts`.`user_id`"},
	PostID:    whereHelperstring{field: "`reposts`.`post_id`"},
	CreatedAt: whereHelpernull_Time{field: "`reposts`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`reposts`.`updated_at`"},
}

// RepostRels is where relationship names are stored.
var RepostRels = struct {
	User string
	Post string
}{
	User: "User",
	Post: "Post",
}

// repostR is where relationships are stored.
type repostR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
	Post *Post `boil:"Post" json:"Post" toml:"Post" yaml:"Post"`
}

// NewStruct creates a new relationship struct
func (*repostR) NewStruct() *repostR {
	return &repostR{}
}

func (r *repostR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *repostR) GetPost() *Post {
	if r == nil {
		return nil
	}
	return r.Post
}

// repostL is where Load methods for each relationship are stored.
type repostL struct{}

var (
	repostAllColumns            = []string{"id", "user_id", "post_id", "created_at", "updated_at"}
	repostColumnsWithoutDefault = []string{"id", "user_id", "post_id"}
	repostColumnsWithDefault    = []string{"created_at", "updated_at"}
	repostPrimaryKeyColumns     = []string{"id"}
	repostGeneratedColumns      = []string{}
)

type (
	// RepostSlice is an alias for a slice of pointers to Repost.
	// This should almost always be used instead of []Repost.
	RepostSlice []*Repost
	// RepostHook is the signature for custom Repost hook methods
	RepostHook func(context.Context, boil.ContextExecutor, *Repost) error

	repostQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repostType                 = reflect.TypeOf(&Repost{})
	repostMapping              = queries.MakeStructMapping(repostType)
	repostPrimaryKeyMapping, _ = queries.BindMapping(repostType, repostMapping, repostPrimaryKeyColumns)
	repostInsertCacheMut       sync.RWMutex
	repostInsertCache          = make(map[string]insertCache)
	repostUpdateCacheMut       sync.RWMutex
	repostUpdateCache          = make(map[string]updateCache)
	repostUpsertCacheMut       sync.RWMutex
	repostUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repostAfterSelectMu sync.Mutex
var repostAfterSelectHooks []RepostHook

var repostBeforeInsertMu sync.Mutex
var repostBeforeInsertHooks []RepostHook
var repostAfterInsertMu sync.Mutex
var repostAfterInsertHooks []RepostHook

var repostBeforeUpdateMu sync.Mutex
var repostBeforeUpdateHooks []RepostHook
var repostAfterUpdateMu sync.Mutex
var repostAfterUpdateHooks []RepostHook

var repostBeforeDeleteMu sync.Mutex
var repostBeforeDeleteHooks []RepostHook
var repostAfterDeleteMu sync.Mutex
var repostAfterDeleteHooks []RepostHook

var repostBeforeUpsertMu sync.Mutex
var repostBeforeUpsertHooks []RepostHook
var repostAfterUpsertMu sync.Mutex
var repostAfterUpsertHooks []RepostHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Repost) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Repost) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Repost) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Repost) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Repost) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Repost) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Repost) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Repost) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Repost) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range repostAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepostHook registers your hook function for all future operations.
func AddRepostHook(hookPoint boil.HookPoint, repostHook RepostHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repostAfterSelectMu.Lock()
		repostAfterSelectHooks = append(repostAfterSelectHooks, repostHook)
		repostAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		repostBeforeInsertMu.Lock()
		repostBeforeInsertHooks = append(repostBeforeInsertHooks, repostHook)
		repostBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		repostAfterInsertMu.Lock()
		repostAfterInsertHooks = append(repostAfterInsertHooks, repostHook)
		repostAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		repostBeforeUpdateMu.Lock()
		repostBeforeUpdateHooks = append(repostBeforeUpdateHooks, repostHook)
		repostBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		repostAfterUpdateMu.Lock()
		repostAfterUpdateHooks = append(repostAfterUpdateHooks, repostHook)
		repostAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		repostBeforeDeleteMu.Lock()
		repostBeforeDeleteHooks = append(repostBeforeDeleteHooks, repostHook)
		repostBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		repostAfterDeleteMu.Lock()
		repostAfterDeleteHooks = append(repostAfterDeleteHooks, repostHook)
		repostAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		repostBeforeUpsertMu.Lock()
		repostBeforeUpsertHooks = append(repostBeforeUpsertHooks, repostHook)
		repostBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		repostAfterUpsertMu.Lock()
		repostAfterUpsertHooks = append(repostAfterUpsertHooks, repostHook)
		repostAfterUpsertMu.Unlock()
	}
}

// One returns a single repost record from the query.
func (q repostQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Repost, error) {
	o := &Repost{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for reposts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Repost records from the query.
func (q repostQuery) All(ctx context.Context, exec boil.ContextExecutor) (RepostSlice, error) {
	var o []*Repost

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Repost slice")
	}

	if len(repostAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Repost records in the query.
func (q repostQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count reposts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repostQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if reposts exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Repost) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Post pointed to by the foreign key.
func (o *Repost) Post(mods ...qm.QueryMod) postQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PostID),
	}

	queryMods = append(queryMods, mods...)

	return Posts(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repostL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepost interface{}, mods queries.Applicator) error {
	var slice []*Repost
	var object *Repost

	if singular {
		var ok bool
		object, ok = maybeRepost.(*Repost)
		if !ok {
			object = new(Repost)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepost))
			}
		}
	} else {
		s, ok := maybeRepost.(*[]*Repost)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepost))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &repostR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repostR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Reposts = append(foreign.R.Reposts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Reposts = append(foreign.R.Reposts, local)
				break
			}
		}
	}

	return nil
}

// LoadPost allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repostL) LoadPost(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRepost interface{}, mods queries.Applicator) error {
	var slice []*Repost
	var object *Repost

	if singular {
		var ok bool
		object, ok = maybeRepost.(*Repost)
		if !ok {
			object = new(Repost)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRepost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRepost))
			}
		}
	} else {
		s, ok := maybeRepost.(*[]*Repost)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRepost)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRepost))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &repostR{}
		}
		args[object.PostID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repostR{}
			}

			args[obj.PostID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`posts`),
		qm.WhereIn(`posts.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Post")
	}

	var resultSlice []*Post
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Post")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for posts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for posts")
	}

	if len(postAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Post = foreign
		if foreign.R == nil {
			foreign.R = &postR{}
		}
		foreign.R.Reposts = append(foreign.R.Reposts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PostID == foreign.ID {
				local.R.Post = foreign
				if foreign.R == nil {
					foreign.R = &postR{}
				}
				foreign.R.Reposts = append(foreign.R.Reposts, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the repost to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Reposts.
func (o *Repost) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reposts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, repostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &repostR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Reposts: RepostSlice{o},
		}
	} else {
		related.R.Reposts = append(related.R.Reposts, o)
	}

	return nil
}

// SetPost of the repost to the related item.
// Sets o.R.Post to related.
// Adds o to related.R.Reposts.
func (o *Repost) SetPost(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Post) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reposts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"post_id"}),
		strmangle.WhereClause("`", "`", 0, repostPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PostID = related.ID
	if o.R == nil {
		o.R = &repostR{
			Post: related,
		}
	} else {
		o.R.Post = related
	}

	if related.R == nil {
		related.R = &postR{
			Reposts: RepostSlice{o},
		}
	} else {
		related.R.Reposts = append(related.R.Reposts, o)
	}

	return nil
}

// Reposts retrieves all the records using an executor.
func Reposts(mods ...qm.QueryMod) repostQuery {
	mods = append(mods, qm.From("`reposts`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`reposts`.*"})
	}

	return repostQuery{q}
}

// FindRepost retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepost(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Repost, error) {
	repostObj := &Repost{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `reposts` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, repostObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from reposts")
	}

	if err = repostObj.doAfterSelectHooks(ctx, exec); err != nil {
		return repostObj, err
	}

	return repostObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Repost) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no reposts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repostColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repostInsertCacheMut.RLock()
	cache, cached := repostInsertCache[key]
	repostInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repostAllColumns,
			repostColumnsWithDefault,
			repostColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repostType, repostMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repostType, repostMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `reposts` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `reposts` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `reposts` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, repostPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into reposts")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for reposts")
	}

CacheNoHooks:
	if !cached {
		repostInsertCacheMut.Lock()
		repostInsertCache[key] = cache
		repostInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Repost.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Repost) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repostUpdateCacheMut.RLock()
	cache, cached := repostUpdateCache[key]
	repostUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repostAllColumns,
			repostPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update reposts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `reposts` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, repostPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repostType, repostMapping, append(wl, repostPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update reposts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for reposts")
	}

	if !cached {
		repostUpdateCacheMut.Lock()
		repostUpdateCache[key] = cache
		repostUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repostQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for reposts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for reposts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepostSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `reposts` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repostPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in repost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all repost")
	}
	return rowsAff, nil
}

var mySQLRepostUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Repost) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no reposts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repostColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRepostUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repostUpsertCacheMut.RLock()
	cache, cached := repostUpsertCache[key]
	repostUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			repostAllColumns,
			repostColumnsWithDefault,
			repostColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repostAllColumns,
			repostPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert reposts, could not build update column list")
		}

		ret := strmangle.SetComplement(repostAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`reposts`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `reposts` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(repostType, repostMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repostType, repostMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for reposts")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(repostType, repostMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for reposts")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for reposts")
	}

CacheNoHooks:
	if !cached {
		repostUpsertCacheMut.Lock()
		repostUpsertCache[key] = cache
		repostUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Repost record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Repost) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Repost provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repostPrimaryKeyMapping)
	sql := "DELETE FROM `reposts` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from reposts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for reposts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repostQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no repostQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from reposts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for reposts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepostSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repostBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `reposts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repostPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from repost slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for reposts")
	}

	if len(repostAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Repost) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRepost(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepostSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepostSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repostPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `reposts`.* FROM `reposts` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, repostPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in RepostSlice")
	}

	*o = slice

	return nil
}

// RepostExists checks if the Repost row exists.
func RepostExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `reposts` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if reposts exists")
	}

	return exists, nil
}

// Exists checks if the Repost row exists.
func (o *Repost) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RepostExists(ctx, exec, o.ID)
}

// InsertAll inserts all rows with the specified column values, using an executor.
func (o RepostSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(repostColumnsWithDefault, row)
		wl, _ := columns.InsertColumnSet(
			repostAllColumns,
			repostColumnsWithDefault,
			repostColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `reposts` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(repostType, repostMapping, wl)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into reposts")
	}

	return nil
}

// UpsertAll upserts all rows with the specified column values, using an executor.
func (o RepostSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}
	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())

			if queries.MustTime(row.CreatedAt).IsZero() {
				queries.SetScanner(&row.CreatedAt, currTime)
			}
			if queries.MustTime(row.UpdatedAt).IsZero() {
				queries.SetScanner(&row.UpdatedAt, currTime)
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return err
		}

		nzDefaults := queries.NonZeroDefaultSet(repostColumnsWithDefault, row)
		insert, _ := insertColumns.InsertColumnSet(
			repostAllColumns,
			repostColumnsWithDefault,
			repostColumnsWithoutDefault,
			nzDefaults,
		)
		if i == 0 {
			sql = "INSERT INTO `reposts` " + "(`" + strings.Join(insert, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(insert), len(vals)+1, len(insert))
		if i != len(o)-1 {
			sql += ", "
		}
		valMapping, err := queries.BindMapping(repostType, repostMapping, insert)
		if err != nil {
			return err
		}
		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	update := updateColumns.UpdateColumnSet(
		repostAllColumns,
		repostPrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return errors.New("sqlboilerdao: unable to upsert account_patients, could not build update column list")
	}

	sql += " ON DUPLICATE KEY UPDATE "
	for i, v := range update {
		if i != 0 {
			sql += ","
		}
		quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
		sql += quoted + " = VALUES(" + quoted + ")"
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, vals...)
	}

	_, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into reposts")
	}

	return nil
}
