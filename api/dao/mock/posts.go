// Code generated by MockGen. DO NOT EDIT.
// Source: dao/posts.go
//
// Generated by this command:
//
//	mockgen -source=dao/posts.go -destination=dao/mock/posts.go -package=mockdao
//

// Package mockdao is a generated GoMock package.
package mockdao

import (
	context "context"
	reflect "reflect"
	dao "utes-x-api/dao"
	model "utes-x-api/model"

	gomock "go.uber.org/mock/gomock"
)

// MockPost is a mock of Post interface.
type MockPost struct {
	ctrl     *gomock.Controller
	recorder *MockPostMockRecorder
	isgomock struct{}
}

// MockPostMockRecorder is the mock recorder for MockPost.
type MockPostMockRecorder struct {
	mock *MockPost
}

// NewMockPost creates a new mock instance.
func NewMockPost(ctrl *gomock.Controller) *MockPost {
	mock := &MockPost{ctrl: ctrl}
	mock.recorder = &MockPostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPost) EXPECT() *MockPostMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPost) Create(ctx context.Context, post model.Post) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostMockRecorder) Create(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPost)(nil).Create), ctx, post)
}

// CreateReply mocks base method.
func (m *MockPost) CreateReply(ctx context.Context, replyTo, userID model.ID, reply model.Post) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReply", ctx, replyTo, userID, reply)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReply indicates an expected call of CreateReply.
func (mr *MockPostMockRecorder) CreateReply(ctx, replyTo, userID, reply any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReply", reflect.TypeOf((*MockPost)(nil).CreateReply), ctx, replyTo, userID, reply)
}

// GetMany mocks base method.
func (m *MockPost) GetMany(ctx context.Context, query dao.GetManyQuery) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, query)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockPostMockRecorder) GetMany(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockPost)(nil).GetMany), ctx, query)
}

// GetWithReplies mocks base method.
func (m *MockPost) GetWithReplies(ctx context.Context, postID model.ID) (*model.PostWithReplies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithReplies", ctx, postID)
	ret0, _ := ret[0].(*model.PostWithReplies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithReplies indicates an expected call of GetWithReplies.
func (mr *MockPostMockRecorder) GetWithReplies(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithReplies", reflect.TypeOf((*MockPost)(nil).GetWithReplies), ctx, postID)
}
